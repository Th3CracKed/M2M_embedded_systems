{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset128 Times New Roman;}{\f4\fswiss\fprq2\fcharset128 Arial;}{\f5\fnil\fprq0\fcharset128 OpenSymbol{\*\falt Arial Unicode MS};}{\f6\fnil\fprq2\fcharset128 DejaVu Sans Mono;}{\f7\fnil\fprq2\fcharset128 DejaVu Sans;}{\f8\fswiss\fprq0\fcharset128 DejaVu Sans;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue128;\red128\green128\blue128;}
{\stylesheet{\s0\snext0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af6\langfe2052\dbch\af7\afs24\lang1081\fs20\loch\f3\lang1033 Default;}
{\s1\sbasedon18\snext19\ilvl0\outlinelevel0\sb240\sa120\keepn\b\hich\af6\dbch\af7\afs32\ab\loch\f3\fs26 Heading 1;}
{\s2\sbasedon18\snext19\ilvl1\outlinelevel1\sb240\sa120\keepn\i\b\hich\af6\dbch\af7\afs28\ai\ab0\loch\f4\fs24 Heading 2;}
{\s3\sbasedon18\snext19\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af7\afs28\ab\loch\f3\fs22 Heading 3;}
{\*\cs15\snext15\hich\af5\dbch\af5\loch\f5 Bullets;}
{\*\cs16\snext16\cf2\ul\ulc0\langfe255\lang255\lang255 Internet Link;}
{\*\cs17\snext17 Numbering Symbols;}
{\s18\sbasedon0\snext19\sb240\sa120\keepn\hich\af6\dbch\af7\afs28\loch\f4\fs28 Heading;}
{\s19\sbasedon0\snext19\sb0\sa120\fs22 Text body;}
{\s20\sbasedon19\snext20\sb0\sa120\dbch\af8\fs22 List;}
{\s21\sbasedon0\snext21\sb120\sa120\noline\i\dbch\af8\afs24\ai\fs24 Caption;}
{\s22\sbasedon0\snext22\noline\dbch\af8\fs20 Index;}
{\s23\sbasedon2\snext23\sb240\sa120\keepn\i\b\hich\af6\dbch\af7\afs28\ai\ab0\loch\f3\fs24 Untitled1;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\'00;}{\levelnumbers\'01;}\fi-432\li432}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'03\'00.\'01;}{\levelnumbers\'01\'03;}\fi-576\li576}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\fi-720\li720}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-864\li864}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1008\li1008}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1152\li1152}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1296\li1296}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1440\li1440}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1584\li1584}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3600}\listid2}
{\list\listtemplateid3
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3600}\listid3}
{\list\listtemplateid4
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3600}\listid4}
{\list\listtemplateid5
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3600}\listid5}
{\list\listtemplateid6
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3600}\listid6}
{\list\listtemplateid7
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3600}\listid7}
{\list\listtemplateid8
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3600}\listid8}
{\list\listtemplateid9
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-360\li720}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-360\li1080}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-360\li1440}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-360\li1800}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-360\li2160}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-360\li2520}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-360\li2880}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-360\li3240}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-360\li3600}\listid9}
{\list\listtemplateid10
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-360\li720}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-360\li1080}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-360\li1440}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-360\li1800}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-360\li2160}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-360\li2520}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-360\li2880}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-360\li3240}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-360\li3600}\listid10}
{\list\listtemplateid11
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3600}\listid11}
{\list\listtemplateid12
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-360\li720}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-360\li1080}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-360\li1440}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-360\li1800}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-360\li2160}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-360\li2520}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-360\li2880}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-360\li3240}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-360\li3600}\listid12}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}}{\info{\author Olivier Gruber}{\creatim\yr2020\mo1\dy11\hr19\min25}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}{\comment OpenOffice}{\vern4160}}\deftab709

{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default;}}
\formshade\paperh16838\paperw11906\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pgndec\pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af6\langfe2052\dbch\af7\afs24\lang1081\fs20\loch\f3\lang1033\qc{\b\afs28\ab\rtlch \ltrch\loch\fs28
Work Log \uc3 \u8211\'e2\'80\'93 M2M \uc1 }
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af6\langfe2052\dbch\af7\afs24\lang1081\fs20\loch\f3\lang1033\qc{\b\afs28\ab\rtlch \ltrch\loch\fs28
2020}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af6\langfe2052\dbch\af7\afs24\lang1081\fs20\loch\f3\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s1\ilvl0\outlinelevel0\sb240\sa120\keepn\b\hich\af6\dbch\af7\afs32\ab\loch\f3\fs26{\listtext\pard\plain  1\tab}\ls1 \li432\ri0\lin432\rin0\fi-432{\rtlch \ltrch\loch
Preface by Pr. Olivier Gruber}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
This document is your work log for the first step in the M2M course, master-\u13\'0dlevel, at the University of Grenoble, France. It is a document for you, to keep track of what you do and what you learn. It is meant to be useful to you, should you ever work again with embedded systems and IoT sensors. }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
The given outline and the related questions are provided as a guideline for your learning. They are not about\u13\'0d getting a good grade if you answer them correctly, they are about giving you different pointers on what to learn about.\u13\'0d The goal of the questions is therefore not to be answered in three lines of\u13\'0d text that you will soon forget. The questions must be understood, researched, and discussed with fellow\u13\'0d students and your professor.\u13\'0d }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Writing down what you do and the answers to the questions, in your own words, is a great tool for helping your learn\u13\'0d and remember. Also, it keeps track of what you know, the URLs you visited,\u13\'0d the open questions that you are trouble with, etc. The tools you used. It is intended to be a living document, written as you go, improved as you learn. Ultimately, the goal of the document is to be kept for your personal records.\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
You will surrender this work log every week to your professor, as a proof of work and progress. Your final grade will be based on the weekly progress throughout the few weeks of the course.}
\par \pard\plain \s19\sb0\sa120\fs22{\b\ab\rtlch \ltrch\loch
REMEMBER these important points:}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls2 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Plaggia is a crime that can get you evicted forever from\u13\'0d french universities... The solution is simple, write using your own words or\u13\'0d quote, giving the source of the quoted text. }
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls2 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
You do not\u13\'0d learn through cut&paste. }
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls2 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
You also do not learn much by watching somebody\u13\'0d else doing.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
The course is organized as sequence of steps, intended to guide you through a path of discovery of the different tools and components that one encounters when working with embedded systems or IoT sensors. This is only an introductory course and yet it presents a lot of things. Be curious, ask questions, discuss with others. We will cover two main steps, covering standalone systems and Linux-based systems.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
With standalone systems, the software stack is minimal, running directly on the hardware. In other words, there is no operating systems, the software runs on \uc3 \u8220\'e2\'80\'9c\uc1 }{\i\ai\rtlch \ltrch\loch
bare metal}{\rtlch \ltrch\loch
\uc3 \u8221\'e2\'80\'9d. \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
With Linux-based systems, the software stack uses the Linux kernel as its foundation. It could be to run a full Linux distribution such as Ubuntu or Debian. It could also be Android. It could also be a small software environment running as processes above the Linux kernel. }
\par \pard\plain \s1\ilvl0\outlinelevel0\sb240\sa120\keepn\b\hich\af6\dbch\af7\afs32\ab\loch\f3\fs26{\listtext\pard\plain  2\tab}\ls1 \li432\ri0\lin432\rin0\fi-432{\rtlch \ltrch\loch
Prerequisites}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
There are several software and hardware prerequisites to embedded software development. }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
First, one has to chose one hardware board. In the embedded world, it is often a small board with an ARM processor integrated in a System-On-Chip with different hardware accelerators and device controllers. Sometimes, a board with an Intel processor, typically the i386, is used. In other words, using a desktop of yesterday for today's embedded systems.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Then, one has to download and configure a compatible tool-chain to build a software stack for that board. This usually includes at least a compiler, a linker, and a debugger. An example would be the GNU tool-chain with the compiler (gcc), the linker (lg), and the debugger (gdb).}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Traditionally, to test the software, developers had to use a real board, often relying on what is called a JTAG interface to download their software, debug the execution. Most embedded systems do support a serial line for direct interaction through a command line interface. This works great but it is tedious, error-prone, and requires a real board, with wires everywhere. }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
In recent years, software emulation of hardware platforms has simplified software development for embedded systems drastically. A developer would pick an emulator for his chosen platform and can then test and debug its software stack much more easily. For instance, QEMU is one of these emulators, supporting a lot of the main-stream boards. }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
So to summarize our prerequisites, we need to make the following choices:}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls8 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
A board: we will choose the well-know PC-104 family of boards, based on the i386 processor}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls8 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
A tool-chain: we will choose the GNU tool-chain}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls8 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
An emulator: we will choose QEMU.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
We chose the i386 platform because it will be easier for this course. The next course, more advanced, would be to choose an ARM-based platform.}
\par \pard\plain \s1\ilvl0\outlinelevel0\sb240\sa120\keepn\b\hich\af6\dbch\af7\afs32\ab\loch\f3\fs26{\listtext\pard\plain  3\tab}\ls1 \li432\ri0\lin432\rin0\fi-432{\rtlch \ltrch\loch
Host Linux Configuration}
\par \pard\plain \s19\sb0\sa120\fs22{\b0\ab0\rtlch \ltrch\loch
Now, let's check the current installation of your }{\ul\ulc0\b\ab\rtlch \ltrch\loch
host Linux}{\b0\ab0\rtlch \ltrch\loch
, that is, your personal machine.  }
\par \pard\plain \s19\sb0\sa120\fs22{\b0\ab0\rtlch \ltrch\loch
This course assumes your machine runs Linux, either Ubuntu or Debian. Other distributions may work also, but adjustments are expected to be necessary. You may run Linux as a dual boot or within a virtual machine such as VirtualBox or VMware. For Mac users, Mac-OS is a Unix environment, but you will experience a lot of problems.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
We are guessing that you already have installed the GNU tool-chain, but probably for the x86_64 platform, assuming your personal machine is based on the 64-bit Intel processor IA-64. You can check this way:}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
$ which gcc\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
/usr/bin/gcc\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
$ gcc --version\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
In this case, you would have the version 5.4 of the GNU tool-chain. But it is most likely for the 64-bit architecture, which you can verify like this:}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
$ dpkg --print-architecture\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
amd64\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
This tells you that your machine is an \uc3 \u8220\'e2\'80\'9camd64\u8221\'e2\'80\'9d platform, which is a 64-bit processor. But the PC-104 board is based on the 32-bit Intel processor IA-32, also known as i386. This means that you need two things. \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
You need to make sure that your personal machine accepts the installation of software packages for the i386 platform. First, check to see if your computer already supports it:}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
$ dpkg --print-foreign-architectures\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
i386\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
If you see a line with \uc3 \u8220\'e2\'80\'9ci386\u8221\'e2\'80\'9d like above, then your machine is already configured to accept i386-specific packages. If not, you need to configure it so:\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\b\ab\rtlch \ltrch\loch
$ dpkg \uc3 \u8211\'e2\'80\'93add-architecture i386\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
Now, you need to configure your GNU tool-chain to support multiple architecture. Let's check first if it is already the case:}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
$ dpkg-query --search gcc*multilib\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
gcc-5-multilib: /usr/share/doc/gcc-5-multilib\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
If you see a result to the above command, like shown above, then you are good. Otherwise, you need to install the multilib support:}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\b\ab\rtlch \ltrch\loch
$ sudo apt-get install gcc-multilib\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
This installs the multilib support for the default GNU tool-chain of your platform. }
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
}
\par \pard\plain \s1\ilvl0\outlinelevel0\sb240\sa120\keepn\b\hich\af6\dbch\af7\afs32\ab\loch\f3\fs26{\listtext\pard\plain  4\tab}\ls1 \li432\ri0\lin432\rin0\fi-432{\rtlch \ltrch\loch
Standalone System \u8211\'13 Build and Run}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
It is time to try our standalone system. We provided you with a working system that can be built and run using the following script:}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
$ ./mkdisk.sh}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
The script will go through a series of build steps before running our system:}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  1.\tab}\ilvl0\ls9 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Checking dependencies}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  2.\tab}\ilvl0\ls9 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Building master boot record}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  3.\tab}\ilvl0\ls9 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Building the bare-metal kernel}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  4.\tab}\ilvl0\ls9 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Creating the disk image (QEMU raw format)}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  5.\tab}\ilvl0\ls9 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Booting a virtual machine with QEMU }
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
Try it out, it should work out of the box. You should see a greeting message telling you that you know have a simple console that echoes everything you type. It should look like this:}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
===============================================}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Booting a virtual machine with QEMU...\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Nota Bene: to stop QEMU: \u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch
    }{\i\ai\rtlch \ltrch\loch
- hit 'Ctrl-A' and then 'c', you will get to QEMU monitor\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch
    }{\i\ai\rtlch \ltrch\loch
- then type 'quit' \u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Hello!\u13\'0d\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
This is a simple echo console... please type something.\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
>\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
Great! It works, no let's }{\ul\ulc0\rtlch \ltrch\loch
learn how it works}{\rtlch \ltrch\loch
...}
\par \pard\plain \s1\ilvl0\outlinelevel0\sb240\sa120\keepn\b\hich\af6\dbch\af7\afs32\ab\loch\f3\fs26{\listtext\pard\plain  5\tab}\ls1 \li432\ri0\lin432\rin0\fi-432{\rtlch \ltrch\loch
Standalone System \u8211\'13 Learn the basics}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
This step is about building a standalone system from scratch. We will learn how to:}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls3 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Build a disk image:}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \u9702\'3f\tab}\ilvl1\ls3 \li1080\ri0\lin1080\rin0\fi-360{\rtlch \ltrch\loch
With our own master boot record}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \u9702\'3f\tab}\ilvl1\ls3 \li1080\ri0\lin1080\rin0\fi-360{\rtlch \ltrch\loch
Our own boot loader}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls3 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Build a small standalone kernel:}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \u9702\'3f\tab}\ilvl1\ls3 \li1080\ri0\lin1080\rin0\fi-360{\rtlch \ltrch\loch
Running bare-metal on a 32-bit processor (i386)}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \u9702\'3f\tab}\ilvl1\ls3 \li1080\ri0\lin1080\rin0\fi-360{\rtlch \ltrch\loch
Supporting UART communication}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls3 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Use QEMU to execute our software stack and debug with gdb}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
We gave you a working system, you are asked to read and learn. We did not say read and understand, we said read and }{\b\ab\rtlch \ltrch\loch
learn}{\rtlch \ltrch\loch
, meaning that you are expected to }{\ul\ulc0\rtlch \ltrch\loch
learn the knowledge and skills to do it on your own}{\rtlch \ltrch\loch
. We suggest that you follow these steps:}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls4 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Read and learn the shell scripts}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls4 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Understand the boot process of i386-based machine}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls4 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Understand the basics of a boot loader}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls4 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Learn the basics of bare-metal programming}
\par \pard\plain \s2\ilvl1\outlinelevel1\sb240\sa120\keepn\i\b\hich\af6\dbch\af7\afs28\ai\ab0\loch\f4\fs24{\listtext\pard\plain  5.1\tab}\ls1 \li576\ri0\lin576\rin0\fi-576{\rtlch \ltrch\loch
Read and learn the shell scripts}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
There are two scripts: mkdisk.sh and checks.sh. Start with the mkdisk.sh. There is no need to execute the scripts first, you are supposed to read and understand them before executing them.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
You will learn the basics of shell scripting, if you do not know how already. The scripts are simple and yet they introduce most of the constructs one needs for everyday scripting. }
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Describe here, in your own words, what the scripts are doing and the key points about them that will help read and understand these scripts in a couple of years from now.}
\par \pard\plain \s2\ilvl1\outlinelevel1\sb240\sa120\keepn\i\b\hich\af6\dbch\af7\afs28\ai\ab0\loch\f4\fs24{\listtext\pard\plain  5.2\tab}\ls1 \li576\ri0\lin576\rin0\fi-576{\rtlch \ltrch\loch
Understand the boot process of an i386-based machine}
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Describe in your own words the boot process of  an i386-based machine. At the very least, you need to discuss:}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls5 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
The BIOS and the MBR}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls5 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
The chosen layout for our disk image}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls5 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
The role of the boot loader and of the kernel}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls5 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
The role of QEMU}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
This is pretty much about describing the knowledge necessary to understanding the different steps of the script mkdisk.sh. }
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
You are asked to understand the basics of the boot looader, not learn how to code one yourself.}{\rtlch \ltrch\loch
 The goal is to have a good idea of what happens when the BIOS loads the MBR and what the loaded code does. There are two parts, one part written in assembly and the other in C. }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
The part written in assembly (boot.S) is fully commented, so you should be able to understand what it does: prepare the machine to execute the C code. Explain what is done and why, it will give insights about what happens before the \uc3 \u8220\'e2\'80\'9cmain\u8221\'e2\'80\'9d function of any C program.  \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
The part written in C (loader.c) is essentially loading the kernel. Relate the code you are reading with the disk layout you understood from reading the script \uc3 \u8220\'e2\'80\'9cmkdisk.sh\u8221\'e2\'80\'9d. \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Understand the difference between the two format \uc3 \u8220\'e2\'80\'9cboot.elf\u8221\'e2\'80\'9d and \u8220\'e2\'80\'9cboot.mbr\u8221\'e2\'80\'9d. \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Describe briefly what is the ELF format. }{\rtlch \ltrch\loch
Of course, you may Google it, but also learn via the local manual on your machine, using the shell command \uc3 \u8220\'e2\'80\'9cman\u8221\'e2\'80\'9d. The command \u8220\'e2\'80\'9cman\u8221\'e2\'80\'9d is an interface to the Linux  reference manuals\uc1 \u13\'0d. In a shell, if you know a command name, you can learn about it using the reference manuals, try out:}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch
     }{\rtlch \ltrch\loch
$ man man}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch
     }{\rtlch \ltrch\loch
$ man ls}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch
 }{\rtlch \ltrch\loch
See? Related to ELF, look at }
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls6 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
man file}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls6 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
man elf }
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls6 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
man readelf}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls6 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
man objdump}
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Use these commands }{\rtlch \ltrch\loch
(file, readelf, and objdump) to explore the contents of both \uc3 \u8220\'e2\'80\'9cboot.elf\u8221\'e2\'80\'9d and \u8220\'e2\'80\'9cboot.mbr\u8221\'e2\'80\'9d.\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Explain how the makefile links the two object files \uc3 \u8220\'e2\'80\'9cboot.o\u8221\'e2\'80\'9d and \u8220\'e2\'80\'9cloader.o\u8221\'e2\'80\'9d in the \u8220\'e2\'80\'9cboot.elf\u8221\'e2\'80\'9d executable.\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch
 }{\ul\ulc0\rtlch \ltrch\loch
Explain the arguments and flags given to the GNU linker (ld):}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
\tab -nostdlib -N -m elf_i386 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch
             }{\rtlch \ltrch\loch
-e start -Ttext 0x7c00}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
In the makefile, explain why the flag \uc3 \u8220\'e2\'80\'9c-m32\u8221\'e2\'80\'9d is given to both the assembler (AS) and the C compiler (gcc). \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls7 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
How does that relate to the linker flag \uc3 \u8220\'e2\'80\'9c-m elf_i386\u8221\'e2\'80\'9d.  \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls7 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
How does that relate to the fact that we use the hypervisor \uc3 \u8220\'e2\'80\'9cqemu-system-i386\u8221\'e2\'80\'9d.\uc1 }
\par \pard\plain \s2\ilvl1\outlinelevel1\sb240\sa120\keepn\i\b\hich\af6\dbch\af7\afs28\ai\ab0\loch\f4\fs24{\listtext\pard\plain  5.3\tab}\ls1 \li576\ri0\lin576\rin0\fi-576{\rtlch \ltrch\loch
Learn the basics of bare-metal programming}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
What are the basics of bare-metal programming? Well, this is about the knowledge and skills you need to understand and learn before you can actually start writing your own software stack running bare-metal on a board of your choice. }
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
First step, let's look at the makefile}{\rtlch \ltrch\loch
, a very simple makefile. Look at the target \uc3 \u8220\'e2\'80\'9ckernel.elf\u8221\'e2\'80\'9d, which we already discussed earlier as being the ELF executable for our standalone kernel. \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
kernel.elf: crt0.o serial.o main.o}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
\tab $(LD) -nostdlib -m elf_i386 -e crt0 -Tldscript -o $@ $+}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
We recognize most of the options passed to the linker, except for the last one: \uc3 \u8220\'e2\'80\'9c\uc1 }{\i\ai\rtlch \ltrch\loch
-Tldscript}{\rtlch \ltrch\loch
\uc3 \u8221\'e2\'80\'9d.\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
This is about giving the linker a specific script to drive the linking process. By default, the GNU linker has its own linker script, but it is very complex and it does suit our needs in this particular case. }
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
So have a look at the linker script (}{\i\ul\ulc0\ai\rtlch \ltrch\loch
ldscript}{\ul\ulc0\rtlch \ltrch\loch
), it is small and simple.}{\rtlch \ltrch\loch
 }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
What does it do?}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
Why is the address 0x1000000 mentioned? }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
Why is important to know that address at link time?}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
Why can't we use the default linker script?}
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Now, look at the file crt0.S. }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
What does it do? }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
What is the stack_top symbol about? Why is it called }{\i\ai\rtlch \ltrch\loch
stack_top}{\rtlch \ltrch\loch
 and not just }{\i\ai\rtlch \ltrch\loch
stack}{\rtlch \ltrch\loch
 or }{\i\ai\rtlch \ltrch\loch
stack_bottom}{\rtlch \ltrch\loch
?}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
What is the constant STACK_SIZE and why is the value 8192 appropriate?}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
Read about the real one, from the GNU tool-chain at }{{\field{\*\fldinst HYPERLINK "https://en.wikipedia.org/wiki/Crt0" }{\fldrslt \cf2\ul\ulc0\langfe255\lang255\lang255\rtlch \ltrch\loch
https://en.wikipedia.org/wiki/Crt0}}}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
Why do we need our own?}
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Now, look at the file }{\i\ul\ulc0\ai\rtlch \ltrch\loch
serial.c}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
What is a serial line? }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
How does that relate to the way with launch QEMU with the option \uc3 \u8220\'e2\'80\'9c\uc1 }{\i\ai\rtlch \ltrch\loch
-serial stdio}{\rtlch \ltrch\loch
\uc3 \u8221\'e2\'80\'9d?  \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
When you execute our kernel, using the shell script \uc3 \u8220\'e2\'80\'9cmkdisk.sh\u8221\'e2\'80\'9d, in which window do you interact with the serial line COM1? \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
Why are speaking of sending and receiving characters? }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
What characters can be sent or received? Any character? Such as the characters }{\b\ab\rtlch \ltrch\loch
\uc2 \u233\'c3\'a9\uc1 }{\rtlch \ltrch\loch
 or }{\b\ab\rtlch \ltrch\loch
\uc2 \u224\'c3\'a0\uc1 }{\rtlch \ltrch\loch
?}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\ul\ulc0\rtlch \ltrch\loch
Look at the inlined functions }{\i\ul\ulc0\ai\rtlch \ltrch\loch
mmio_load}{\ul\ulc0\rtlch \ltrch\loch
 and }{\i\ul\ulc0\ai\rtlch \ltrch\loch
mmio_write}{\ul\ulc0\rtlch \ltrch\loch
 in }{\i\ul\ulc0\ai\rtlch \ltrch\loch
main.h}{\ul\ulc0\rtlch \ltrch\loch
.}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
What is a mmio register, also called a port in the i386 world?}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
What does }{\i\ai\rtlch \ltrch\loch
__inline}{\rtlch \ltrch\loch
 and }{\i\ai\rtlch \ltrch\loch
__attribute__}{\rtlch \ltrch\loch
 qualifiers mean?}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\ul\ulc0\rtlch \ltrch\loch
Why is the documentation of the functions }{\i\ul\ulc0\ai\rtlch \ltrch\loch
serial_receive}{\ul\ulc0\rtlch \ltrch\loch
 and }{\i\ul\ulc0\ai\rtlch \ltrch\loch
serial_send}{\ul\ulc0\rtlch \ltrch\loch
 mention the fact that these functions may block?}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
What does it mean blocking in our bare-metal context?}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
Why may it necessary to block?}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
Could avoid blocking in these functions? }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0{\rtlch \ltrch\loch
What would be the consequences?}
\par \pard\plain \s1\ilvl0\outlinelevel0\sb240\sa120\keepn\b\hich\af6\dbch\af7\afs32\ab\loch\f3\fs26{\listtext\pard\plain  6\tab}\ls1 \li432\ri0\lin432\rin0\fi-432{\rtlch \ltrch\loch
Standalone System \u8211\'13 Adding features}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
It is time for you to add new features to our kernel.}
\par \pard\plain \s2\ilvl1\outlinelevel1\sb240\sa120\keepn\i\b\hich\af6\dbch\af7\afs28\ai\ab0\loch\f4\fs24{\listtext\pard\plain  6.1\tab}\ls1 \li576\ri0\lin576\rin0\fi-576{\rtlch \ltrch\loch
Using GDB}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
If you never used the GNU debugger before, you will have to work harder. }{\ul\ulc0\rtlch \ltrch\loch
Read the GDBQuickGuide for a crash course in how to use the GNU debugger, called }{\ul\ulc0\b\ab\rtlch \ltrch\loch
gdb}{\ul\ulc0\rtlch \ltrch\loch
.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
It is time to learn how to use GDB to debug the execution of our bare-metal software stack. You have to understand that everything is a bit specific here, because we are not debugging a regular process, we are debugging bare-metal software running on the QEMU emulator.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
So first, you need to start QEMU in debug mode:}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
\tab $ ./mkdisk.sh -debug}
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Look at the script and make sure you learn how to ask QEMU to support debugging.}{\rtlch \ltrch\loch
 Look at the meaning for the two flags \uc3 \u8220\'e2\'80\'9c-s -S\u8221\'e2\'80\'9d.\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
So, QEMU and the GNU debugger (gdb) are compatible. QEMU supports a gdb-compatible debug server on the local port 1234. This is a network port, like the port 80 used by web servers, supporting a remote connection from gdb. To tell gdb that it needs to connect to a remote target, you need to use the gdb command \uc3 \u8220\'e2\'80\'9ctarget\u8221\'e2\'80\'9d, like this:\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22\sb0\sa4{\rtlch \ltrch
             }{\rtlch \ltrch\loch
$ gdb}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
(gdb) target remote:1234}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
Remote debugging using :1234\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
0x0000fff0 in ?? ()\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
(gdb) \u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
Now let's use gdb to single-step through our boot-loader and then debug our kernel.}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af7\afs28\ab\loch\f3\fs22{\listtext\pard\plain  6.1.1\tab}\ls1 \li720\ri0\lin720\rin0\fi-720{\rtlch \ltrch\loch
Debugging the boot loader}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Alright, we are connected and QEMU is suspended. Remember QEMU suspended the execution to wait for the debugger connection, it did so somewhere in the code of the BIOS that executes when the board powers up.  }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Before we can continue the execution, we need to put some breakpoints. Let's try to put a breakpoint at the address 0x7c00 and then resume the execution:}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) br *0x7c00\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Breakpoint 1 at 0x7c00\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) cont\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Continuing.\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Breakpoint 1, 0x00007c00 in ?? ()\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) \u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\ul\ulc0\rtlch \ltrch\loch
Explain the first breakpoint and where is the address 0x7c00 comes from?}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
We would like to add more breakpoint, but using memory addresses is a bit hard. We would like gdb to understand the symbols of our boot-loader program. Fortunately, it can:  }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb)  symbol mbr/boot.elf}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Reading symbols from mbr/boot.elf...done.\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb)}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0{\b\ab\rtlch \ltrch\loch
Important: }{\rtlch \ltrch\loch
gdb does not read the symbol from the target it is connected to, it reads the symbol from an ELF file. Reading the wrong symbols will prevent you from debugging.}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\i0\ai0\rtlch \ltrch\loch
Cool, let's see if we can put a breakpoint in the C function \uc3 \u8220\'e2\'80\'9c\uc1 }{\i\ai\rtlch \ltrch\loch
diskboot}{\i0\ai0\rtlch \ltrch\loch
\uc3 \u8221\'e2\'80\'9d and resume the execution:\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\i0\ai0\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) br diskboot}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Breakpoint 2 at 0x7dc7: file loader.c, line 122.\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) cont\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Continuing.\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Breakpoint 2, diskboot (_eax=1785688930, _ebx=129920) at loader.c:122\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
122\tab void diskboot(uint32_t _eax, uint32_t _ebx) \{\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) \u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb116\sa120{\i0\ai0\rtlch \ltrch\loch
Fantastic, it worked. Now you can single-step through that function. It is C code, commented, so you }{\rtlch \ltrch\loch
can read it and in particular you can understand that it loads our kernel. Right? }
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb116\sa120{\ul\ulc0\rtlch \ltrch\loch
Make sure you explain here what happens during the function }{\i\ul\ulc0\ai\rtlch \ltrch\loch
diskboot}{\ul\ulc0\rtlch \ltrch\loch
  and why it is loading our kernel.}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\ul\ulc0\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
Of course, right after loading our kernel, the boot-loader will jump to that code. But gdb is still using the symbols from the boot-loader, so we need to ask gdb to load the correct symbols for the execution that is about to begin within our kernel.}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) symbol kernel/kernel.elf \u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Load new symbol table from "kernel/kernel.elf"? (y or n) y\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Reading symbols from kernel/kernel.elf...done.\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Error in re-setting breakpoint 2: Function "diskboot" not defined.\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) \u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
Hum... gdb is complaining... Normal? Of course, since our second breakpoint is referring to a symbol }{\i\ai\rtlch \ltrch\loch
diskboot}{\rtlch \ltrch\loch
 from the symbols in }{\i\ai\rtlch \ltrch\loch
mbr.elf}{\rtlch \ltrch\loch
 and those are no longer known. Time to set a new breakpoint in the function }{\i\ai\rtlch \ltrch\loch
kmain}{\i0\ai0\rtlch \ltrch\loch
 and continue the execution:}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) br kmain\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Breakpoint 4 at 0x10001a: file main.c, line 26.\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) cont\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Continuing.\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Breakpoint 4, kmain () at main.c:26\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
26\tab void kmain(void) \{\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) \u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
Great! You are in business, you are within the code of the kernel. }
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
Happy coding and debugging...}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af7\afs28\ab\loch\f3\fs22{\listtext\pard\plain  6.1.2\tab}\ls1 \li720\ri0\lin720\rin0\fi-720{\rtlch \ltrch\loch
Debugging the kernel}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
Now that we want to focus on the kernel, we suggest that you skip debugging the boot-loader now. You can directly load the kernel symbols and set a breakpoint for the function \uc3 \u8220\'e2\'80\'9ckmain\u8221\'e2\'80\'9d. \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
(gdb) target remote:1234}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
Remote debugging using :1234\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
0x0000fff0 in ?? ()\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) symbol kernel/kernel.elf}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) br kmain}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) cont}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
Breakpoint 1, kmain () at main.c:31\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
31\tab void kmain(void) \{\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) \u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
You can even do simpler by telling gdb directly which ELF executable to read the symbols from.}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
$ gdb kernel/kernel.elf}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
(gdb) target remote:1234}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
Remote debugging using :1234\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
0x0000fff0 in ?? ()\u13\'0d}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) br kmain}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
(gdb) cont}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\ul\ulc0\rtlch \ltrch\loch
You now have to understand the function }{\i\ul\ulc0\ai\rtlch \ltrch\loch
kmain}{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
, which is}{\i\ul\ulc0\ai\rtlch \ltrch\loch
 }{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
simple and yet surprising. }
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\ul\ulc0\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
Notice that the code receives and sends characters from and to the serial line COM1.}{\i0\ai0\rtlch \ltrch\loch
 Remember, we linked our kernel without any of the standard libraries.}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
Notice the never-ending loop, essentially doing an echo of the typed characters.}{\i0\ai0\rtlch \ltrch\loch
 Launch the execution... and wait a few seconds... do you hear something? Is the fan of your computer ramping up? }
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
Why is the fan of your personal maching working so hard?}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\ul\ulc0\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
Modify the kernel code so that the received characters are no longer sent back.}{\i0\ai0\rtlch \ltrch\loch
 What happens? Nothing shows when you are typing. See, the terminal window is not echoing locally, like it normally does with regular processes. }{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
Explain in your own words.}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\i0\ai0\rtlch \ltrch\loch
Put back the echo and try out different keys. Regular letters and digits work. The shift key works also. The delete and backspace keys do not work.}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\i0\ai0\rtlch \ltrch\loch
Try the arrows... they work, the cursor is moving around. Try that in a regular shell... Left and right work the same, but not up and down.}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\i0\ai0\rtlch \ltrch
  }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
What is going on? Why is there a difference?}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
Explain the special treatment of the character with the ASCII code 13?}{\i0\ai0\rtlch \ltrch\loch
  The value 13 is the code for the key \uc3 \u8220\'e2\'80\'9cENTER\u8221\'e2\'80\'9d on your keyboard. What are the characters '\\n' and '\\r'?\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
What is this business of converting characters and integers? }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
What is the ASCII codes? }
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i0\ul\ulc0\ai0\rtlch \ltrch\loch
How do the use of ASCII codes relate to the fact that characters are sent or received through a serial line? }
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\li0\ri0\lin0\rin0\fi0\sb0\sa4{\i0\ai0\rtlch \ltrch\loch
OK, we need to look at the ASCII code, but printing numbers is not supported yet, only characters. So let's add the feature to have the possibility to print characters, strings, and numbers\uc3 \u8212\'e2\'80\'94like a printf function... this is the next feature... \uc1 }
\par \pard\plain \s2\ilvl1\outlinelevel1\sb240\sa120\keepn\i\b\hich\af6\dbch\af7\afs28\ai\ab0\loch\f4\fs24{\listtext\pard\plain  6.2\tab}\ls1 \li576\ri0\lin576\rin0\fi-576{\rtlch \ltrch\loch
Feature: adding kprintf}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
The function }{\i\ai\rtlch \ltrch\loch
kprintf}{\rtlch \ltrch\loch
 is what the name suggests: a }{\i\ai\rtlch \ltrch\loch
printf}{\rtlch \ltrch\loch
 for our kernel. Adding this feature will help you print  and debug, so it makes sense to do it first.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
The code is in the file \uc3 \u8220\'e2\'80\'9c\uc1 }{\i\ai\rtlch \ltrch\loch
kprintf.c}{\rtlch \ltrch\loch
\uc3 \u8221\'e2\'80\'9d. \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
You need to modify the makefile to compile and link in that support.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Then, look towards the end of the file, you will see the code for the function }{\i\ai\rtlch \ltrch\loch
kprintf}{\rtlch \ltrch\loch
. You will see that it requires a function }{\i\ai\rtlch \ltrch\loch
kputchar}{\rtlch \ltrch\loch
 to be defined. }
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
So go ahead, define this function as sending the given character to the serial line (COM1).}{\rtlch \ltrch\loch
 We suggest that you define the function }{\i\ai\rtlch \ltrch\loch
kputchar}{\rtlch \ltrch\loch
 in the file \uc3 \u8220\'e2\'80\'9c\uc1 }{\i\ai\rtlch \ltrch\loch
main.c}{\rtlch \ltrch\loch
\uc3 \u8221\'e2\'80\'9d.\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Let's use our kprintf feature to print the received characters but also their ASCII codes, like this:}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\rtlch \ltrch
  }{\i\ai\rtlch \ltrch\loch
while(1) \{}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch
    }{\i\ai\rtlch \ltrch\loch
unsigned char c;}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch
    }{\i\ai\rtlch \ltrch\loch
c=serial_receive(COM1);}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch
    }{\i\ai\rtlch \ltrch\loch
kprintf("[%c] %d \\n",c,(int)c);}
\par \pard\plain \s19\sb0\sa120\fs22\li709\ri0\lin709\rin0\fi0\sb0\sa4{\i\ai\rtlch \ltrch\loch
\}}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
\line Try regular keys, such as digits or letters (upper and lower case). }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Try the shift or control key? Nothing, right? Try Ctrl-x, yep, you have a code.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Now try the arrows? Woah... for one key, you receive multiple codes, 3 codes exactly.  These  sequences are called escape sequences, you can read about them on Wikipedia: }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
\tab }{{\field{\*\fldinst HYPERLINK "https://en.wikipedia.org/wiki/ANSI_escape_code" }{\fldrslt \cf2\ul\ulc0\langfe255\lang255\lang255\rtlch \ltrch\loch
https://en.wikipedia.org/wiki/ANSI_escape_code}}}
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Explain in your own words why escape codes are needed, discussing a few examples.}
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Write down here the sequences for the 4 arrows, we will need them later.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
\tab Left:}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\tab Right:}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
\tab Up:}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
\tab Down:}
\par \pard\plain \s19\sb0\sa120\fs22{\b\ab\rtlch \ltrch\loch
Note }{\rtlch \ltrch\loch
that you cannot move outside the terminal window with the arrow keys.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Alright, let's have some fun and manage a console over our terminal. }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
First, learn how to resize your terminal window to 25 lines of 80 columns. Look at the menus for your terminal windows, the menu called \uc3 \u8220\'e2\'80\'9cTerminal\u8221\'e2\'80\'9d, select the size of the emulated terminal: 24 x 80.\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Now that you know the size of the terminal screen, you can implement the following features:}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  1.\tab}\ilvl0\ls10 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
More the cursor home, at the top-left corner of the terminal screen.}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  2.\tab}\ilvl0\ls10 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Clear the terminal screen, with the cursor at the top-left corner.}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  3.\tab}\ilvl0\ls10 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Bind the key Ctrl-x to clearing the screen.}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  4.\tab}\ilvl0\ls10 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Support the keys 'delete' and 'backspace'}
\par \pard\plain \s2\ilvl1\outlinelevel1\sb240\sa120\keepn\i\b\hich\af6\dbch\af7\afs28\ai\ab0\loch\f4\fs24{\listtext\pard\plain  6.3\tab}\ls1 \li576\ri0\lin576\rin0\fi-576{\rtlch \ltrch\loch
Feature: console}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
We are going to launch QEMU slightly differently, asking QEMU to emulate a screen. Remember, the terminal window in which you launch QEMU is not a screen connected to the virtual machine emulated by QEMU. Indeed, it is a terminal connected via a serial line. }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
So go into the script \uc3 \u8220\'e2\'80\'9cmkdisk.sh\u8221\'e2\'80\'9d and modify the flags passed to QEMU, removing the \u8220\'e2\'80\'9c-nographic\u8221\'e2\'80\'9d flag. As you can see when running the script, QEMU pops a new window. This screen is part of the emulated hardware, as a VGA screen. \uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Let's add some primitive support for that screen, adding the file \uc3 \u8220\'e2\'80\'9cvideo.c\u8221\'e2\'80\'9d to list of object files linked together to create our kernel. So modify accordingly the makefile.\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Now, in the function \uc3 \u8220\'e2\'80\'9c\uc1 }{\i\ai\rtlch \ltrch\loch
main}{\rtlch \ltrch\loch
\uc3 \u8221\'e2\'80\'9d in the file \u8220\'e2\'80\'9c\uc1 }{\i\ai\rtlch \ltrch\loch
main.c}{\rtlch \ltrch\loch
\uc3 \u8221\'e2\'80\'9d, add the following line as the first line in that function:\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22\sb0\sa4{\i\ai\rtlch \ltrch\loch
\tab void kmain(void) \{}
\par \pard\plain \s19\sb0\sa120\fs22\sb0\sa4{\i\ai\rtlch \ltrch\loch
\tab      video_write_string(0x2a,"Console greetings!");}
\par \pard\plain \s19\sb0\sa120\fs22\sb0\sa4{\i\ai\rtlch \ltrch
                  }{\i\ai\rtlch \ltrch\loch
serial_init(COM1);}
\par \pard\plain \s19\sb0\sa120\fs22\sb0\sa4{\i\ai\rtlch \ltrch
                  \uc3 \u8230\'e2\'80\'a6\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch
 }{\rtlch \ltrch\loch
Run the script, what happens? Look at VGA screen, do you see the message in green at the top-left corner?}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Great!}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Now, we want to separate outputs. Regular printing and character echoing should go on the console screen, while we keep the ability to print via the serial line. This means:}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls11 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
We want that typed character, in the QEMU terminal, echo now on the console screen.}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls11 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
We want to introduce a function printf that will print on the console screen.}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls11 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
But we want to keep the function kprintf as printing via the serial line.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
This way, we can use the serial line to print out debug messages and they are no longer messing up the application output that happens on the console screen. }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Note that the typed characters via the serial line are echoed to the console screen. We agree, this is a bit weird, but reading the PS/2 keyboard, emulated by QEMU is too hard. This is due to the fact that QEMU emulates both a keyboard and a mouse on the PS/2 network. Because QEMU has a bug, there is no way to turn off the mouse events. Because of a poor hardware specification, when polling, there is no way to tell what data is coming from what device. And finally, enabling interrupts on the i386 processor is too complex for this introductory course.}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Therefore, to keep it simple, we keep polling characters received from the serial line and echoing them onto the console screen.}
\par \pard\plain \s19\sb0\sa120\fs22{\ul\ulc0\rtlch \ltrch\loch
Implement the following features:}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  1.\tab}\ilvl0\ls12 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Echo characters on the console screen}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  2.\tab}\ilvl0\ls12 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Clear the console screen with Ctrl-x.}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  3.\tab}\ilvl0\ls12 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Have the arrows move the cursor on the console screen, not on the QEMU terminal.}
\par \pard\plain \s19\sb0\sa120\fs22{\listtext\pard\plain  4.\tab}\ilvl0\ls12 \li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
Implement the function printf in the file \uc3 \u8220\'e2\'80\'9c\uc1 }{\i\ai\rtlch \ltrch\loch
video.c}{\rtlch \ltrch\loch
\uc3 \u8221\'e2\'80\'9d\uc1 }
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
Have fun... but do not forget to learn, not just understand and quickly throw some code together...}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22{\rtlch \ltrch\loch
}
\par \pard\plain \s19\sb0\sa120\fs22\sb0\sa120{\rtlch \ltrch\loch
}
\par }